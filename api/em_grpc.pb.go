// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: em.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmServiceClient is the client API for EmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmServiceClient interface {
	Send(ctx context.Context, in *EmSendRequest, opts ...grpc.CallOption) (*EmSendResponse, error)
}

type emServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmServiceClient(cc grpc.ClientConnInterface) EmServiceClient {
	return &emServiceClient{cc}
}

func (c *emServiceClient) Send(ctx context.Context, in *EmSendRequest, opts ...grpc.CallOption) (*EmSendResponse, error) {
	out := new(EmSendResponse)
	err := c.cc.Invoke(ctx, "/em.EmService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmServiceServer is the server API for EmService service.
// All implementations must embed UnimplementedEmServiceServer
// for forward compatibility
type EmServiceServer interface {
	Send(context.Context, *EmSendRequest) (*EmSendResponse, error)
	mustEmbedUnimplementedEmServiceServer()
}

// UnimplementedEmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmServiceServer struct {
}

func (UnimplementedEmServiceServer) Send(context.Context, *EmSendRequest) (*EmSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedEmServiceServer) mustEmbedUnimplementedEmServiceServer() {}

// UnsafeEmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmServiceServer will
// result in compilation errors.
type UnsafeEmServiceServer interface {
	mustEmbedUnimplementedEmServiceServer()
}

func RegisterEmServiceServer(s grpc.ServiceRegistrar, srv EmServiceServer) {
	s.RegisterService(&EmService_ServiceDesc, srv)
}

func _EmService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/em.EmService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmServiceServer).Send(ctx, req.(*EmSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmService_ServiceDesc is the grpc.ServiceDesc for EmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "em.EmService",
	HandlerType: (*EmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _EmService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "em.proto",
}
